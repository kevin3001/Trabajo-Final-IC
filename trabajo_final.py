# -*- coding: utf-8 -*-
"""Trabajo Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CuVWJK0qKALFCXdKU7QIxqkRmBiNIQd5
"""

import pandas as pd

df=pd.read_csv('datasetshopping.csv')
df

df.describe()

df.isnull().any()

df.VisitorType

df.groupby(['VisitorType']).count() #obtenemos la cantidad de tipos de variable que existen en una determinada columna

#actualizaci칩n del dataframe
df2 = df.drop(['Month'],axis=1)

df2

N_visitor= []

for i in df2.VisitorType:
    if (i=='New_Visitor'):
        N_visitor.append(0)
    if (i=='Other'):
        N_visitor.append(1)
    if (i=='Returning_Visitor'):
        N_visitor.append(2)

for i in range(len(df2.VisitorType)):
    if df2.Weekend[i]==False:
        df2.Weekend[i]=0
    if df2.Weekend[i]==True:
        df2.Weekend[i]=1
    if df2.Revenue[i]==False:
        df2.Revenue[i]=0
    if df2.Revenue[i]==True:
        df2.Revenue[i]=1

len(N_visitor)

for i in range(len(df2.VisitorType)):
    #df2.VisitorType[i]=N_visitor[i]
    df2['VisitorType'][i]=N_visitor[i]

df2

df2.describe()

df2 = (df2-df2.min())/(df2.max()-df2.min())
df2.describe()





X=df2.drop(['Revenue'],axis=1).values
X

Y=df2['Revenue'].values 
Y

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=0)

Y_train=Y_train.astype('int') #convertimos a tipo entero ya que por defecto se pondr치 de tipo objeto
Y_train

from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0).fit(X_train, Y_train)

Y_pred=clf.predict(X_test)

from sklearn import metrics

Y_test=Y_test.astype('int')#por defecto se encuentra en objeto

print("accuracy: ", metrics.accuracy_score(Y_test, Y_pred))

import matplotlib.pyplot as plt 
import numpy as np
fig, (ax1, ax2) = plt.subplots(1, 2, constrained_layout=True, figsize=(12, 4))
ax1.plot(100 + np.arange(len(X_test[400:500])), Y_test[400:500])
ax2.plot(100 + np.arange(len(X_test[400:500])), Y_pred[400:500])
ax1.set_title("REAL");  ax2.set_title("PREDICHO")
ax1.set_ylabel('Decisi칩n')             ;  ax2.set_ylabel('Decisi칩n') 
ax1.set_xlabel('Cliente')   ;  ax2.set_xlabel('Cliente') 
plt.show()

